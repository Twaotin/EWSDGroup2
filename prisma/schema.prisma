// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  userid        Int      @id @default(autoincrement()) @unique // Primary key
  username      String    @unique
  password      String
  email         String    @unique
  roleid        Int?
  department    departments? @relation(fields: [departmentid], references: [departmentid])
  departmentid  Int?
  isactive  Boolean
  lastlogin DateTime?
  passwordreset  String?  @unique
  passwordresetexpire DateTime?
  roles        roles?     @relation(fields: [roleid], references: [id])
  ideas         ideas[]    // Relation to ideas model remains the same
  ideareports      ideareports[]
  comments      comments[]  // Added relation to Comments model
  ideaviews        ideaviews[]
  ideathumbup      ideathumbup[]
  ideathumbdown     ideathumbdown[]
  @@map("users")
}
// Define the model for the roles table
model roles {
  id          Int       @id @default(autoincrement()) // Primary key
  name        String    @unique
  description String?
  users       users[]
  @@map("roles")
}


// Define the model for the departments table
model departments {
  departmentid  Int       @id @default(autoincrement()) // Primary key
  departmentname String
  users         users[]
  ideas         ideas[]
  @@map("departments")
}


model ideas {
  ideaid           Int      @id @default(autoincrement()) @unique // Primary key
  userid           Int
  user             users   @relation(fields: [userid], references: [userid]) // Foreign key to users table
  departmentid      Int
  department       departments @relation(fields: [departmentid], references: [departmentid])
  closuredateid    Int
  ideadate     ideadates @relation(fields: [closuredateid], references: [closuredateid])
  ideatext         String
  ideatitle        String
  submissiondate  DateTime
  isclosure       Boolean
  isfinalclosure   Boolean
  isanonymous      Boolean
  ideathumbup      ideathumbup[]
  ideathumbdown     ideathumbdown[]
  ideaviews        ideaviews[]
  ideacategories   ideacategories[]
  ideareports      ideareports[]
  comments         comments[]  // Added relation to Comments model

  @@map("ideas")
}


model categories {
  categoryid Int    @id @default(autoincrement()) // Primary key
  categoryname String
  ideacategories ideacategories[]
  @@map("categories")
}


model ideacategories {
  ideaid      Int        // Composite key
  idea        ideas      @relation(fields: [ideaid], references: [ideaid])
  categoryid  Int        // Composite key
  category    categories @relation(fields: [categoryid], references: [categoryid])
    
  @@id([ideaid, categoryid])
  @@map("ideacategories")
}

model ideaviews {
  ideaviewid  Int    @id @default(autoincrement()) 
  idea         ideas  @relation(fields: [ideaid], references: [ideaid])
  ideaid      Int
  user         users  @relation(fields: [userid], references: [userid])
  userid      Int 

  @@map("ideaviews")
  @@unique([ideaid, userid]) // Enforce uniqueness of (ideaid, userid) pairs
}

model ideathumbup {
  ideathumbupid  Int    @id @default(autoincrement()) 
  idea         ideas  @relation(fields: [ideaid], references: [ideaid])
  ideaid      Int
  user         users  @relation(fields: [userid], references: [userid])
  userid      Int 

  @@map("ideathumbup")
  @@unique([ideaid, userid]) // Enforce uniqueness of (ideaid, userid) pairs
}

model ideathumbdown {
  ideathumbdownid  Int    @id @default(autoincrement()) 
  idea         ideas  @relation(fields: [ideaid], references: [ideaid])
  ideaid      Int
  user         users  @relation(fields: [userid], references: [userid])
  userid      Int 

  @@map("ideathumbdown")
  @@unique([ideaid, userid]) // Enforce uniqueness of (ideaid, userid) pairs
}

model ideadates {
  closuredateid   Int       @id @default(autoincrement()) // Primary key
  academicyear    String
  opendate        DateTime
  closuredate     DateTime
  finalclosuredate DateTime

  ideas           ideas[] 
     @@map("ideadates")
}

model ideareports {
  reportid   Int      @id @default(autoincrement())  @unique 
  idea         ideas  @relation(fields: [ideaid], references: [ideaid])
  ideaid      Int
  user         users  @relation(fields: [userid], references: [userid])
  userid      Int 
  reportdate DateTime @default(now())
  reporttext String
  reportsubject String  
  reviewstatus String  
  reviewer     String? 
  
 
  @@map("ideareports")
}
model comments {
  commentid   Int      @id @default(autoincrement()) @unique  // Primary key
  ideaid      Int
  userid      Int
  commenttext  String
  commentdate DateTime @default(now())
  isanonymous Boolean

  idea         ideas   @relation(fields: [ideaid], references: [ideaid]) // Foreign key to ideas table
  user         users   @relation(fields: [userid], references: [userid]) // Foreign key to users table

  @@map("comments")
}